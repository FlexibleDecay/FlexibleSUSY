// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at @DateAndTime@

/**
 * @file @ModelName@_decays.hpp
 *
 * This file was generated at @DateAndTime@ with FlexibleSUSY
 * @FlexibleSUSYVersion@ (git commit: @FlexibleSUSYGitCommit@) and SARAH @SARAHVersion@ .
 */

#ifndef @ModelName@_DECAYS_H
#define @ModelName@_DECAYS_H

#include "@ModelName@_decay_table.hpp"
#include "@ModelName@_mass_eigenstates.hpp"
#include "cxx_qft/@ModelName@_qft.hpp"

#include "decays_loop_corrections.hpp"
#include "decays_problems.hpp"

namespace flexiblesusy {

class @ModelName@_mass_eigenstates;

class @ModelName@_decays {
public:
   explicit @ModelName@_decays(const @ModelName@_mass_eigenstates&);
   @ModelName@_decays(@ModelName@_mass_eigenstates const& model, bool);
   @ModelName@_decays(const @ModelName@_decays&) = default;
   @ModelName@_decays(@ModelName@_decays&&) = default;
   ~@ModelName@_decays() = default;
   @ModelName@_decays& operator=(const @ModelName@_decays&) = default;
   @ModelName@_decays& operator=(@ModelName@_decays&&) = default;

   void set_include_higher_order_corrections(bool);
   void set_loop_corrections(const Decays_loop_corrections&);
   const Decays_loop_corrections& get_loop_corrections() const;
   const @ModelName@_decay_table& get_decay_table() const;
   const Decays_problems& get_problems() const;

   void clear();
   void clear_problems();
   void calculate_decays();

@decaysGetters@
@decaysCalculationPrototypes@

@partialWidthCalculationPrototypes@

private:
   @ModelName@_mass_eigenstates model{};
   bool include_higher_order_corrections{true};
   bool run_to_decay_particle_scale{true};
   @ModelName@_decay_table decay_table{};
   Decays_loop_corrections loop_corrections{};
   Decays_problems problems{};

   template<typename FieldIn, typename FieldOut1, typename FieldOut2>
   std::complex<double> effective_coupling(
      const @ModelName@_mass_eigenstates& model,
      const typename cxx_qft::field_indices<FieldIn>::type& indexIn,
      const typename cxx_qft::field_indices<FieldOut1>::type& indexOut1,
      const typename cxx_qft::field_indices<FieldOut2>::type& indexOut2) const {
      return 0.;
   }

   template<typename FieldIn, typename FieldOut1, typename FieldOut2>
   double get_partial_width(
      const cxx_qft::EvaluationContext&,
      typename cxx_qft::field_indices<FieldIn>::type const&,
      typename cxx_qft::field_indices<FieldOut1>::type const&,
      typename cxx_qft::field_indices<FieldOut2>::type const&) const;
};

} // namespace flexiblesusy

#endif
