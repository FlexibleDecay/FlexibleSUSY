// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at @DateAndTime@

/**
 * @file @ModelName@_decays.hpp
 *
 * This file was generated at @DateAndTime@ with FlexibleSUSY
 * @FlexibleSUSYVersion@ (git commit: @FlexibleSUSYGitCommit@) and SARAH @SARAHVersion@ .
 */

#ifndef @ModelName@_DECAYS_H
#define @ModelName@_DECAYS_H

//#include "@ModelName@_decay_table.hpp"
#include "cxx_qft/@ModelName@_qft.hpp"
#include "@ModelName@_effective_couplings_for_decays.hpp"

#include "decays_problems.hpp"

namespace flexiblesusy {

class @ModelName@_mass_eigenstates;

class @ModelName@_decays {
public:
/*   const @ModelName@_decay_table& get_decay_table() const; */
   const Decays_problems& get_problems() const;

   void clear();
   void clear_problems();
   void calculate_decays(const @ModelName@_mass_eigenstates&);

@decaysGetters@
@decaysCalculationPrototypes@

@partialWidthCalculationPrototypes@

private:
/*   @ModelName@_decay_table decay_table{}; */
   Decays_problems problems{};

   template<typename FieldIn, typename FieldOut1, typename FieldOut2>
   double get_partial_width(
      const @ModelName@_mass_eigenstates&,
      const typename cxx_qft::field_indices<FieldIn>::type&,
      const typename cxx_qft::field_indices<FieldOut1>::type&,
      const typename cxx_qft::field_indices<FieldOut2>::type&) const;
};

// generic decay FieldIn -> FieldOut1 FieldOut2
template<typename FieldIn, typename FieldOut1, typename FieldOut2>
double @ModelName@_decays::get_partial_width(
   @ModelName@_mass_eigenstates const& model,
   typename cxx_qft::field_indices<FieldIn>::type const& indexIn,
   typename cxx_qft::field_indices<FieldOut1>::type const& indexOut1,
   typename cxx_qft::field_indices<FieldOut2>::type const& indexOut2
   ) const
{
   using namespace cxx_qft;
   using namespace cxx_qft::fields;

   EvaluationContext context {model};

   const double mIn = context.mass<FieldIn>(indexIn);
   const double mOut1 = context.mass<FieldOut1>(indexOut1);
   const double mOut2 = context.mass<FieldOut2>(indexOut2);

   // phase space symmetry factor
   double ps_symmetry = 1;
   if(std::is_same<FieldOut1, FieldOut2>::value) {
      std::cout << std::is_same<FieldOut1, FieldOut2>::value << '\n';
      if (boost::range::equal(indexOut1, indexOut2)) {
         ps_symmetry = 1.0/2.0;
      }
   }

   double ps = 1/(16*Pi)*sqrt(1. - 2.*(pow(mOut1,2) + pow(mOut2,2))/pow(mIn,2) + pow((mOut1+mOut2)*(mOut1-mOut2)/pow(mIn,2),2));

   const auto indices = concatenate(indexIn, indexOut1, indexOut2);
   double mat2 = dispatch_decay_vertex<FieldIn,FieldOut1,FieldOut2>(context, indices);
   // S -> FF
   if(FieldIn::particle_type == ParticleType::scalar
      &&  FieldOut1::particle_type == ParticleType::fermion
      && FieldOut2::particle_type == ParticleType::fermion) {

   }

   // S -> VV
   if(FieldIn::particle_type == ParticleType::scalar
      &&  FieldOut1::particle_type == ParticleType::vector
      && FieldOut2::particle_type == ParticleType::vector) {

   }

   // S -> SS
   if(FieldIn::particle_type == ParticleType::scalar
      &&  FieldOut1::particle_type == ParticleType::scalar
      && FieldOut2::particle_type == ParticleType::scalar) {

   }

   // S -> SV
   if(FieldIn::particle_type == ParticleType::scalar
      &&  FieldOut1::particle_type == ParticleType::scalar
      && FieldOut2::particle_type == ParticleType::vector) {

   }

   // phase space factor times symmetry factor times matrix element 2.
   return ps * ps_symmetry * mat2;
}

} // namespace flexiblesusy

#endif
