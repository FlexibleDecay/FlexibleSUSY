#include "@ModelName@_higgs_decays.hpp"

#include "@ModelName@_cxx_diagrams.hpp"
#include "cxx_qft/@ModelName@_fields.hpp"

using namespace flexiblesusy;
using namespace cxx_diagrams;
using namespace cxx_qft::fields;

namespace flexiblesusy {

#define PHYSICAL(parameter) model.get_physical().parameter

template<typename FieldIn, typename FieldOut1, typename FieldOut2>
double MRSSM2_HiggsDecays::get_partial_width(unsigned int, unsigned int) const {
   double symmetry = 1;
   if(std::is_same<FieldOut1, FieldOut2>::value) {
      symmetry = 1.0/2.0;
   }

// S -> FF   
if(FieldIn::particle_type == cxx_qft::fields::ParticleType::scalar
   &&  FieldOut1::particle_type == cxx_qft::fields::ParticleType::fermion
   && FieldOut2::particle_type == cxx_qft::fields::ParticleType::fermion
   ) {}

   /*
   if(std::is_same<FieldIn, Scalar>::value &&
   std::is_same<FieldOut1, Scalar>::value &&
   std::is_same<FieldOut2, Scalar>::value) {}

   if(std::is_same<FieldIn, Scalar>::value &&
   std::is_same<FieldOut1, Fermion>::value &&
   std::is_same<FieldOut2, Fermion>::value) {}

     if(std::is_same<FieldIn, Scalar>::value &&
   std::is_same<FieldOut1, Vector>::value &&
   std::is_same<FieldOut2, Vector>::value) {}

   if(std::is_same<FieldIn, Scalar>::value &&
   std::is_same<FieldOut1, Scalar>::value &&
   std::is_same<FieldOut2, Vector>::value) {}
   */
   return 1.0;
}

double MRSSM2_HiggsDecays::get_hhVPVP_partial_width(unsigned gO1) const
{
   auto x = MRSSM2_HiggsDecays::template get_partial_width<cxx_qft::fields::Fe,cxx_qft::fields::Fe,cxx_qft::fields::Fe>(1,2);
   const auto mass = PHYSICAL(Mhh)(gO1);
   //return 0.0049735919716217296 * Power(mass, 3.0) * AbsSqr(eff_CphhVPVP(gO1));
}

double @ModelName@_HiggsDecays::get_hhVGVG_partial_width(unsigned gO1) const
{
   const auto mass = PHYSICAL(Mhh)(gO1);
   //return 0.039788735772973836 * Power(mass, 3.0) * AbsSqr(eff_CphhVGVG(gO1));
}

double @ModelName@_HiggsDecays::get_hhVZVP_partial_width(unsigned gO1) const
{
  const auto mass = PHYSICAL(Mhh)(gO1);
  const auto MVZ = PHYSICAL(MVZ);
  if(MVZ/mass >= 1.0)
    return 0.0;
  //return 1.0/(16.0*Pi) * Power(mass * (1.0 - Sqr(MVZ/mass)), 3) * AbsSqr(eff_CphhVZVP(gO1));
}

/*
double MRSSM2_effective_couplings::get_hhVZVZ_partial_width(unsigned gO1) const
{
   const double mass = PHYSICAL(Mhh)(gO1);
   const double MV = PHYSICAL(MVZ);
   const double x = Sqr(MV/mass);
   // three-body-decays if below threshold
   if(4*x > 1.0) {
     const auto vd = MODELPARAMETER(vd);
     const auto vu = MODELPARAMETER(vu);
     const auto vev = Sqrt(Sqr(vd) + Sqr(vu));
     const double sw2 = Sqr(Sin(model.ThetaW()));//1.0 - Sqr(PHYSICAL(MVWp)/PHYSICAL(MVZ));

     const double deltaV = 7.0/12.0 - 10.0/9.0 * sw2 + 40.0/27.0 * Sqr(sw2);
     const double RT = 3*(1 - 8*x + 20*Sqr(x))/Sqrt(4*x - 1) * ArcCos(0.5*(3*x - 1)/Power(x, 3.0/2.0))
                     - 0.5*(1 - x)/x * (2 - 13*x + 47*Sqr(x))
                     - 3.0/2.0 * (1 - 6*x + 4*Sqr(x))*Log(x);

     return 3.0/(128*Power(Pi,3)) * mass/Sqr(vev) * deltaV * RT * AbsSqr(eff_CphhVZVZ(gO1));
   }
   return 1.0/(128*Pi * mass * Sqr(x)) * Sqrt(1 - 4*x) * (1 - 4*x + 12*Sqr(x)) * AbsSqr(eff_CphhVZVZ(gO1));
}
*/

/*
double MRSSM2_effective_couplings::get_hhVWVW_partial_width(unsigned gO1) const
{
   const double mass = PHYSICAL(Mhh)(gO1);
   const double MV = PHYSICAL(MVWm);
   const double x = Sqr(MV/mass);
   // three-body-decays if below threshold
   if(4*x > 1.0) {
     const auto vd = MODELPARAMETER(vd);
     const auto vu = MODELPARAMETER(vu);
     const auto vev = Sqrt(Sqr(vd) + Sqr(vu));
     const double sw2 = Sqr(Sin(model.ThetaW()));//1.0 - Sqr(PHYSICAL(MVWp)/PHYSICAL(MVZ));

     // deltaV is 1 for W-bosons
     const double RT = 3*(1 - 8*x + 20*Sqr(x))/Sqrt(4*x - 1) * ArcCos(0.5*(3*x - 1)/Power(x, 3.0/2.0))
                     - 0.5*(1 - x)/x * (2 - 13*x + 47*Sqr(x))
                     - 3.0/2.0 * (1 - 6*x + 4*Sqr(x))*Log(x);

     return 3.0/(128*Power(Pi,3)) * mass/Sqr(vev) * RT * AbsSqr(eff_CphhVWVW(gO1));
   }
   return 2.0/(128*Pi * mass * Sqr(x)) * Sqrt(1 - 4*x) * (1 - 4*x + 12*Sqr(x)) * AbsSqr(eff_CphhVWVW(gO1));
}
*/

double @ModelName@_HiggsDecays::get_hhhhhh_partial_width(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   const auto mass = PHYSICAL(Mhh)(gO1);
   const auto MS1 = PHYSICAL(Mhh)(gI1);
   const auto MS2 = PHYSICAL(Mhh)(gI2);
   const auto factor = (gI1 == gI2) ? 1 : 2;

   //return factor/(32*Pi * mass) * Sqrt(two_body_phase_space_function(mass, MS1, MS2))
   //                             * AbsSqr(eff_Cphhhhhh(gO1, 4*gI1 + gI2));
}

}
