// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at @DateAndTime@

/**
 * @file @ModelName@_mass_eigenstates_decoupling_scheme.cpp
 * @brief implementation of the @ModelName@ model class in the decoupling scheme
 *
 * Contains the definition of the @ModelName@ model class methods
 * which solve EWSB and calculate masses and mixings from @RenScheme@
 * parameters.
 *
 * This file was generated at @DateAndTime@ with FlexibleSUSY
 * @FlexibleSUSYVersion@ (git commit: @FlexibleSUSYGitCommit@) and SARAH @SARAHVersion@ .
 */

#include "@ModelName@_mass_eigenstates_decoupling_scheme.hpp"
#include "@ModelName@_mass_eigenstates.hpp"
#include "@ModelName@_info.hpp"
#include "config.h"
#include "eigen_utils.hpp"
#include "error.hpp"
#include "ewsb_solver.hpp"
#include "functors.hpp"
#include "linalg2.hpp"
#include "logger.hpp"
#include "memory.hpp"
#include "numerics2.hpp"
#include "raii.hpp"
#include "standard_model.hpp"
#include "wrappers.hpp"

#include <algorithm>
#include <array>
#include <cmath>
#include <functional>
#include <iostream>
#include <memory>
#include <stdexcept>

namespace flexiblesusy {

#define CLASSNAME @ModelName@_mass_eigenstates_decoupling_scheme

#define PHASE(p) model.get_##p()
#define PHYSICAL(parameter) physical.parameter
#define INPUT(parameter) model.get_input().parameter
#define LOCALINPUT(parameter) input.parameter
#define MODELPARAMETER(parameter) model.get_##parameter()
#define EXTRAPARAMETER(parameter) model.get_##parameter()

CLASSNAME::CLASSNAME(const @ModelName@_input_parameters& input_)
   : @ModelName@_soft_parameters(input_)
{
}

CLASSNAME::CLASSNAME(const @ModelName@_mass_eigenstates& model)
{
   fill_from(model);
}

std::unique_ptr<@ModelName@_mass_eigenstates_interface> CLASSNAME::clone() const
{
   return flexiblesusy::make_unique<@ModelName@_mass_eigenstates_decoupling_scheme>(*this);
}

void CLASSNAME::do_force_output(bool flag)
{
   force_output = flag;
}

bool CLASSNAME::do_force_output() const
{
   return force_output;
}

bool CLASSNAME::fill_from(const standard_model::Standard_model& sm_input)
{
   using RM33 = Eigen::Matrix<double, 3, 3>;

   // make a local copy and ensure that the tree-level masses are calculated
   auto sm = sm_input;
   sm.calculate_DRbar_masses();

   const auto sm_gY = sm.get_g1()*standard_model_info::normalization_g1;
   const auto sm_g2 = sm.get_g2()*standard_model_info::normalization_g2;
   const auto sm_g3 = sm.get_g3()*standard_model_info::normalization_g3;
   const auto VEV   = sm.get_v();

   RM33 upQuarksDRbar(RM33::Zero());
   RM33 downQuarksDRbar(RM33::Zero());
   RM33 downLeptonsDRbar(RM33::Zero());

   upQuarksDRbar.diagonal()    = sm.get_MFu();
   downQuarksDRbar.diagonal()  = sm.get_MFd();
   downLeptonsDRbar.diagonal() = sm.get_MFe();

   // set SM-like gauge couplings (assuming they exist in the BSM model)
   set_@hyperchargeCoupling@(sm_gY/@ModelName@_info::normalization_@hyperchargeCoupling@);
   set_@leftCoupling@(sm_g2/@ModelName@_info::normalization_@leftCoupling@);
   set_@strongCoupling@(sm_g3/@ModelName@_info::normalization_@strongCoupling@);

   // set SM-like VEV
   {
      auto& model = *this;
      auto MODEL = this;
@setDecouplingVEVFromSMVEV@
   }

   // set SM-like Yukawa couplings
   {
      auto& model = *this;
@setDecouplingYukawasFromSMYukawas@
   }

   calculate_tree_level_mass_spectrum();
}

bool CLASSNAME::fill_from(const @ModelName@_mass_eigenstates& model)
{
   static_cast<@ModelName@_soft_parameters&>(*this) = static_cast<@ModelName@_soft_parameters>(model);
   physical = model.get_physical();

#define OTHER(p) model.get_##p()
@copyRunningBSMMassesToDecouplingMasses@
#undef OTHER
}

const @ModelName@_physical& CLASSNAME::get_physical() const
{
   return physical;
}

@ModelName@_physical& CLASSNAME::get_physical()
{
   return physical;
}

void CLASSNAME::set_physical(const @ModelName@_physical& physical_)
{
   physical = physical_;
}

const Problems& CLASSNAME::get_problems() const
{
   return problems;
}

Problems& CLASSNAME::get_problems()
{
   return problems;
}

int CLASSNAME::solve_ewsb_equations_tree_level()
{
   int error = EWSB_solver::SUCCESS;

@solveTreeLevelEWSBviaSoftHiggsMasses@

   return error;
}

int CLASSNAME::solve_ewsb_equations()
{
   return solve_ewsb_equations_tree_level();
}

void CLASSNAME::print(std::ostream& ostr) const
{
   ostr << "========================================\n"
           "@ModelName@\n"
           "========================================\n";
   @ModelName@_soft_parameters::print(ostr);
   ostr << "----------------------------------------\n"
           "tree-level @RenScheme@ masses:\n"
           "----------------------------------------\n";
@printMasses@
   ostr << "----------------------------------------\n"
           "tree-level @RenScheme@ mixing matrices:\n"
           "----------------------------------------\n";
@printMixingMatrices@
   physical.print(ostr);
}

/**
 * routine which finds the @RenScheme@ mass eigenstates and mixings.
 */
void CLASSNAME::calculate_tree_level_mass_spectrum()
{
@saveEWSBOutputParameters@
   solve_ewsb_equations_tree_level();

@calculateAllMasses@
}

/**
 * routine which finds the pole mass eigenstates and mixings.
 *
 * @note Does currently nothing, because it is not clear how to
 * calculate the pole masses in this scheme.
 */
void CLASSNAME::calculate_pole_mass_spectrum()
{
   calculate_tree_level_mass_spectrum();
   // move goldstone bosons to the front
   reorder_tree_level_masses();
   copy_tree_level_masses_to_pole_masses();
   check_pole_masses_for_tachyons();
}

void CLASSNAME::copy_tree_level_masses_to_pole_masses()
{
@copyDRbarMassesToPoleMasses@
}

/**
 * reorders @RenScheme@ masses so that golstones are placed at the index
 * specified in the model files definition of the associated
 * gauge boson (see Z-boson definition in default particles.m file
 * in the Models directory of your SARAH distribution for example)
 */
void CLASSNAME::reorder_tree_level_masses()
{
@reorderDRbarMasses@
}

/**
 * reorders pole masses so that golstones are placed at the index
 * specified in the model files definition of the associated
 * gauge boson (see Z-boson definition in default particles.m file
 * in the Models directory of your SARAH distribution for example)
 */
void CLASSNAME::reorder_pole_masses()
{
@reorderPoleMasses@
}

/**
 * Checks the pole masses for tachyons
 */
void CLASSNAME::check_pole_masses_for_tachyons()
{
@checkPoleMassesForTachyons@
}

/**
 * calculates spectrum for model once the @RenScheme@ parameters at
 * at low energies are known
 */
void CLASSNAME::calculate_mass_spectrum()
{
   calculate_tree_level_mass_spectrum();
   calculate_pole_mass_spectrum();
}

void CLASSNAME::clear_tree_level_parameters()
{
@clearOutputParameters@
@clearPhases@
@clearExtraParameters@
}

void CLASSNAME::clear_problems()
{
   problems.clear();
}

void CLASSNAME::clear()
{
   @ModelName@_soft_parameters::clear();
   clear_tree_level_parameters();
   physical.clear();
   problems.clear();
}

void CLASSNAME::set_tree_level_masses(const Eigen::ArrayXd& pars)
{
@setMasses@
}

Eigen::ArrayXd CLASSNAME::get_tree_level_masses() const
{
@getMasses@
}

void CLASSNAME::set_tree_level_masses_and_mixings(const Eigen::ArrayXd& pars)
{
   set_tree_level_masses(pars);

@setMixings@
}

Eigen::ArrayXd CLASSNAME::get_tree_level_masses_and_mixings() const
{
   Eigen::ArrayXd pars(get_tree_level_masses());

@getMixings@

   return pars;
}

void CLASSNAME::set_extra_parameters(const Eigen::ArrayXd& pars)
{
@setExtraParameters@
}

Eigen::ArrayXd CLASSNAME::get_extra_parameters() const
{
@getExtraParameters@
}

@higgsMassGetters@

@massCalculationFunctions@

@tadpoleEqFunctions@

@dependenceFunctions@

std::ostream& operator<<(std::ostream& ostr, const @ModelName@_mass_eigenstates_decoupling_scheme& model)
{
   model.print(ostr);
   return ostr;
}

} // namespace flexiblesusy
