// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at @DateAndTime@

#include <cmath>

#include <boost/range/algorithm.hpp>

#include "config.h"
#include "effective_couplings.hpp"
#include "thread_pool.hpp"

#include "@ModelName@_decays.hpp"
#include "@ModelName@_info.hpp"
#include "@ModelName@_mass_eigenstates.hpp"
#include "@ModelName@_effective_couplings_for_decays.hpp"

namespace flexiblesusy {

using namespace cxx_qft;
using namespace cxx_qft::fields;
using effective_couplings::two_body_phase_space_function;

#define CLASSNAME @ModelName@_decays

/*
const @ModelName@_decay_table& CLASSNAME::get_decay_table() const
{
   return decay_table;
}
*/
const Decays_problems& CLASSNAME::get_problems() const
{
   return problems;
}

void CLASSNAME::clear_problems()
{
   problems.clear();
}

void CLASSNAME::clear()
{
   clear_problems();
/*   decay_table.clear(); */
}

void CLASSNAME::calculate_decays(const @ModelName@_mass_eigenstates& model)
{
#ifdef ENABLE_THREADS
@callAllDecaysFunctionsInThreads@
#else
@callAllDecaysFunctions@
#endif
}

// returns an amplitude squared
// we need to distinquish between different combinations of scalars, fermions and vectors
// as, for examples, for S -> SS we take |A|^2 while for S - > FF we take (|A_L|^2 + |A_R|^2)

// S -> FF
template<typename Field1, typename Field2, typename Field3>
typename std::enable_if<is_scalar<Field1>::value && is_fermion<Field2>::value && is_fermion<Field3>::value, double>::type
amplitude_squared(EvaluationContext const& context,
const std::array<int,
detail::total_number_of_field_indices<
boost::mpl::vector<Field1, Field2, Field3>
>::value> index) {
      std::cout << "SFF ";
      //const auto vertex = Vertex<Field1,Field2,Field3>::evaluate(index, context);
      return 1.;
}
// S -> VV
template<typename Field1, typename Field2, typename Field3>
typename std::enable_if<is_scalar<Field1>::value && is_vector<Field2>::value && is_vector<Field3>::value, double>::type
amplitude_squared(EvaluationContext const& context,
const std::array<int,
detail::total_number_of_field_indices<
boost::mpl::vector<Field1, Field2, Field3>
>::value> index) {
      std::cout << "SVV ";
      //const auto vertex = Vertex<Field1,Field2,Field3>::evaluate(index, context);
      return 1.;
}
// S -> SV
template<typename Field1, typename Field2, typename Field3>
typename std::enable_if<is_scalar<Field1>::value && is_scalar<Field2>::value && is_vector<Field3>::value, double>::type
amplitude_squared(EvaluationContext const& context,
const std::array<int,
detail::total_number_of_field_indices<
boost::mpl::vector<Field1, Field2, Field3>
>::value> index) {
      std::cout << "SSV ";
      //const auto vertex = Vertex<Field1,Field2,Field3>::evaluate(index, context);
      return 1.;
}
// S -> SV
template<typename Field1, typename Field2, typename Field3>
typename std::enable_if<is_scalar<Field1>::value && is_scalar<Field3>::value && is_vector<Field2>::value, double>::type
amplitude_squared(EvaluationContext const& context,
const std::array<int,
detail::total_number_of_field_indices<
boost::mpl::vector<Field1, Field2, Field3>
>::value> index) {
      std::cout << "SSV ";
      //const auto vertex = Vertex<Field1,Field2,Field3>::evaluate(index, context);
      return 1.;
}
// S -> SS
template<typename Field1, typename Field2, typename Field3>
typename std::enable_if<is_scalar<Field1>::value && is_scalar<Field2>::value && is_scalar<Field3>::value, double>::type
amplitude_squared(EvaluationContext const& context,
const std::array<int, detail::total_number_of_field_indices<boost::mpl::vector<Field1, Field2, Field3>>::value> index) {

      std::cout << "SSS ";
      //const auto vertex = Vertex<Field1,Field2,Field3>::evaluate(index, context);
      // return std::norm(vertex.result());
      return 1.;
}
// generic decay of FieldIn -> FieldOut1 FieldOut2
template<typename FieldIn, typename FieldOut1, typename FieldOut2>
double CLASSNAME::get_partial_width(
   @ModelName@_mass_eigenstates const& model,
   typename field_indices<FieldIn>::type const& indexIn,
   typename field_indices<FieldOut1>::type const& indexOut1,
   typename field_indices<FieldOut2>::type const& indexOut2
   ) const
{

   // phase space without symmetry factor
   EvaluationContext context {model};
   const double mIn = context.mass<FieldIn>(indexIn);
   const double mOut1 = context.mass<FieldOut1>(indexOut1);
   const double mOut2 = context.mass<FieldOut2>(indexOut2);
   double ps = 1/(16*Pi)*sqrt(1. - 2.*(pow(mOut1,2) + pow(mOut2,2))/pow(mIn,2) + pow((mOut1+mOut2)*(mOut1-mOut2)/pow(mIn,2),2));

   // phase space symmetry factor
   double ps_symmetry = 1;
   if(std::is_same<FieldOut1, FieldOut2>::value) {
      std::cout << std::is_same<FieldOut1, FieldOut2>::value << '\n';
      if (boost::range::equal(indexOut1, indexOut2)) {
         ps_symmetry = 1.0/2.0;
      }
   }

   // matrix element squared
   const auto indices = concatenate(indexIn, indexOut1, indexOut2);
   const double mat2 = amplitude_squared<FieldIn,FieldOut1,FieldOut2>(context, indices);

   // phase space factor times symmetry factor times matrix element 2.
   return ps * ps_symmetry * mat2;
}

// -------- specializations for decays needing higher order corrections --------

using H = @HiggsBosonName@;
using W = @WBosonName@;
using Z = @ZBosonName@;
using G = @GluonName@;
using A = @PhotonName@;

// special case for Higgs -> Z Z
template<>
double CLASSNAME::get_partial_width<H,Z,Z>(
   @ModelName@_mass_eigenstates const& model,
   typename field_indices<H>::type const& indexIn,
   typename field_indices<Z>::type const& indexOut1,
   typename field_indices<Z>::type const& indexOut2
   ) const {

   EvaluationContext context {model};
   const double mass = context.mass<H>(indexIn);
   const double MV = context.mass<Z>(indexOut1);
   const double x = Sqr(MV/mass);
   double res;
   // three-body-decays if below threshold
   if(4*x > 1.0) {
      // const auto vd = MODELPARAMETER(vd);
      // const auto vu = MODELPARAMETER(vu);
      const auto vev = 1.0; //sqrt(Sqr(vd) + Sqr(vu));
      const double sw2 = Sqr(Sin(model.ThetaW()));//1.0 - Sqr(PHYSICAL(MVWp)/PHYSICAL(MVZ));

      const double deltaV = 7.0/12.0 - 10.0/9.0 * sw2 + 40.0/27.0 * Sqr(sw2);
      const double RT = 3*(1 - 8*x + 20*Sqr(x))/sqrt(4*x - 1) * acos(0.5*(3*x - 1)/pow(x, 3.0/2.0))
                     - 0.5*(1 - x)/x * (2 - 13*x + 47*Sqr(x))
                     - 3.0/2.0 * (1 - 6*x + 4*Sqr(x))*Log(x);

      res = 3.0/(128*pow(Pi,3)) * mass/Sqr(vev) * deltaV * RT;
   } else {
      res = 1.0/(128*Pi * mass * Sqr(x)) * sqrt(1 - 4*x) * (1 - 4*x + 12*Sqr(x));
   }
   return res * AbsSqr(effective_coupling<Z,Z,H>(model, indexOut1, indexOut2, indexIn));
}

// special case for H -> W+ W-
template<>
double CLASSNAME::get_partial_width<H,conj<W>::type,W>(
   @ModelName@_mass_eigenstates const& model,
   typename field_indices<H>::type const& indexIn,
   typename field_indices<conj<W>::type>::type const& indexOut1,
   typename field_indices<W>::type const& indexOut2
   ) const
{

   EvaluationContext context {model};
   const double mass = context.mass<H>(indexIn);
   const double MV = context.mass<W>(indexOut1);
   const double x = Sqr(MV/mass);
   double res;
   // three-body-decays if below threshold
   if(4*x > 1.0) {
      // const auto vd = MODELPARAMETER(vd);
      // const auto vu = MODELPARAMETER(vu);
      const auto vev = 1.0; //sqrt(Sqr(vd) + Sqr(vu));
      const double sw2 = Sqr(Sin(model.ThetaW()));//1.0 - Sqr(PHYSICAL(MVWp)/PHYSICAL(MVZ));

      // deltaV is 1 for W-bosons
      const double RT = 3*(1 - 8*x + 20*Sqr(x))/sqrt(4*x - 1) * acos(0.5*(3*x - 1)/pow(x, 3.0/2.0))
                     - 0.5*(1 - x)/x * (2 - 13*x + 47*Sqr(x))
                     - 3.0/2.0 * (1 - 6*x + 4*Sqr(x))*Log(x);

      res = 3.0/(128*pow(Pi,3)) * mass/Sqr(vev) * RT;
   } else {
      res = 2.0/(128*Pi * mass * Sqr(x)) * sqrt(1 - 4*x) * (1 - 4*x + 12*Sqr(x));
   }
   return res * AbsSqr(effective_coupling<conj<W>::type,W,H>(model, indexOut1, indexOut2, indexIn));
}


// special case for H -> gluon gluon
template<>
double CLASSNAME::get_partial_width<H,G,G>(
   @ModelName@_mass_eigenstates const& model,
   typename field_indices<H>::type const& indexIn,
   typename field_indices<G>::type const& indexOut1,
   typename field_indices<G>::type const& indexOut2
   ) const
{

   EvaluationContext context {model};
   const double mass = context.mass<H>(indexIn);
   return 0.039788735772973836 * pow(mass, 3.0)
      * AbsSqr(effective_coupling<G,G,H>(model, indexOut1, indexOut2, indexIn));
}

// special case for H -> photon photon
template<>
double CLASSNAME::get_partial_width<H,A,A>(
   @ModelName@_mass_eigenstates const& model,
   typename field_indices<H>::type const& indexIn,
   typename field_indices<A>::type const& indexOut1,
   typename field_indices<A>::type const& indexOut2
   ) const
{
   EvaluationContext context {model};
   const double mass = context.mass<H>(indexIn);
   return 0.0049735919716217296 * pow(mass, 3.0)
      * AbsSqr(effective_coupling<A,A,H>(model, indexOut1, indexOut2, indexIn));
}

// special case for H -> photon Z
template<>
double CLASSNAME::get_partial_width<H,A,Z>(
   @ModelName@_mass_eigenstates const& model,
   typename field_indices<H>::type const& indexIn,
   typename field_indices<A>::type const& indexOut1,
   typename field_indices<Z>::type const& indexOut2
   ) const
{

   EvaluationContext context {model};
   const double mass = context.mass<H>(indexIn);
   const double MVZ = context.mass<Z>(indexOut2);
   if(MVZ/mass >= 1.0)
      return 0.0;
   return 1.0/(16.0*Pi) * pow(mass * (1.0 - Sqr(MVZ/mass)), 3)
    * AbsSqr(effective_coupling<A,Z,H>(model, indexOut1, indexOut2, indexIn));
}
template<>
double CLASSNAME::get_partial_width<H,Z,A>(
   @ModelName@_mass_eigenstates const& model,
   typename field_indices<H>::type const& indexIn,
   typename field_indices<Z>::type const& indexOut1,
   typename field_indices<A>::type const& indexOut2
   ) const {
      return get_partial_width<H,A,Z>(model, indexIn, indexOut2, indexOut1);
   }

// special case for H -> H H
template<>
double CLASSNAME::get_partial_width<H,H,H>(
   @ModelName@_mass_eigenstates const& model,
   typename field_indices<H>::type const& indexIn,
   typename field_indices<H>::type const& indexOut1,
   typename field_indices<H>::type const& indexOut2
   ) const
{
   EvaluationContext context {model};
   const double mass = context.mass<H>(indexIn);
   const double MS1 = context.mass<H>(indexOut1);
   const double MS2 = context.mass<H>(indexOut2);
   const auto factor = 1.; //(gI1 == gI2) ? 1 : 2;

   return factor/(32*Pi * mass) * sqrt(two_body_phase_space_function(mass, MS1, MS2))
      * AbsSqr(effective_coupling<H,H,H>(model, indexOut1, indexOut2, indexIn));
}

// special case for H -> Fd Fd
/*
template<>
double CLASSNAME::get_partial_width<H,conj<@DownQuarkName@>::type,@DownQuarkName@>(
   @ModelName@_mass_eigenstates const& model,
   typename field_indices<H>::type const& indexIn,
   typename field_indices<@DownQuarkName@>::type const& indexOut1,
   typename field_indices<@DownQuarkName@>::type const& indexOut2
   ) const
{
   // SM expression + pure BSM 1L corrections
}
*/

@decaysCalculationFunctions@
@partialWidthCalculationFunctions@

} // namespace flexiblesusy
