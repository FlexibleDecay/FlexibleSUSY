// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at @DateAndTime@

/**
 * @file @ModelName@_decays.cpp
 * @brief implementation of particle decays in the @ModelName@
 *
 * Contains the definition of @ModelName@ decays class methods,
 * which calculate the decay rates for particles in the model.
 *
 * This file was generated at @DateAndTime@ with FlexibleSUSY
 * @FlexibleSUSYVersion@ (git commit: @FlexibleSUSYGitCommit@) and SARAH @SARAHVersion@ .
 */

#include "@ModelName@_decays.hpp"
#include "@ModelName@_info.hpp"
#include "@ModelName@_mass_eigenstates.hpp"

#include "config.h"
#include "thread_pool.hpp"
#include "wrappers.hpp"

#include <boost/range/algorithm.hpp>

#include <cmath>

namespace flexiblesusy {

#define CLASSNAME @ModelName@_decays

#define PHYSICAL(parameter) model.get_physical().parameter

using namespace cxx_qft;
using namespace cxx_qft::fields;
using effective_couplings::beta;

CLASSNAME::@ModelName@_decays(const @ModelName@_mass_eigenstates& model_)
   : model(model_)
{
}

CLASSNAME::@ModelName@_decays(const @ModelName@_mass_eigenstates& model_, bool corrections)
   : model(model_)
   , include_higher_order_corrections(corrections)
{
}

void CLASSNAME::set_include_higher_order_corrections(bool flag)
{
   include_higher_order_corrections = flag;
}

const @ModelName@_decay_table& CLASSNAME::get_decay_table() const
{
   return decay_table;
}

void CLASSNAME::set_loop_corrections(const Decays_loop_corrections& loop_corrections_)
{
   loop_corrections = loop_corrections_;
}

const Decays_loop_corrections& CLASSNAME::get_loop_corrections() const
{
   return loop_corrections;
}

const Decays_problems& CLASSNAME::get_problems() const
{
   return problems;
}

void CLASSNAME::clear_problems()
{
   problems.clear();
}

void CLASSNAME::clear()
{
   clear_problems();
   decay_table.clear();
}

void CLASSNAME::calculate_decays()
{
#ifdef ENABLE_THREADS
@callAllDecaysFunctionsInThreads@
#else
@callAllDecaysFunctions@
#endif
}


// -------- specializations for decays needing higher order corrections --------

using H = @HiggsBosonName@;
using W = @WBosonName@;
using Z = @ZBosonName@;
using G = @GluonName@;
using A = @PhotonName@;
using dq = @DownQuarkName@;
using uq = @UpQuarkName@;

// special case for Higgs -> Z Z
// TODO: implement higher order corrections
template<>
double CLASSNAME::get_partial_width<H,Z,Z>(
   const EvaluationContext& context,
   typename field_indices<H>::type const& indexIn,
   typename field_indices<Z>::type const& indexOut1,
   typename field_indices<Z>::type const& indexOut2
   ) const
{

   const double mass = context.mass<H>(indexIn);
   const double MV = context.mass<Z>(indexOut1);
   const double x = Sqr(MV/mass);
   double res;
   // three-body-decays if below threshold
   if(4*x > 1.0) {
      // const auto vd = MODELPARAMETER(vd);
      // const auto vu = MODELPARAMETER(vu);
      // TODO: specify the vev correctly
      const auto vev = 246.0; //sqrt(Sqr(vd) + Sqr(vu));
      const double sw2 = Sqr(Sin(model.ThetaW()));//1.0 - Sqr(PHYSICAL(MVWp)/PHYSICAL(MVZ));

      const double deltaV = 7.0/12.0 - 10.0/9.0 * sw2 + 40.0/27.0 * Sqr(sw2);
      const double RT = 3*(1 - 8*x + 20*Sqr(x))/sqrt(4*x - 1) * acos(0.5*(3*x - 1)/pow(x, 3.0/2.0))
                     - 0.5*(1 - x)/x * (2 - 13*x + 47*Sqr(x))
                     - 3.0/2.0 * (1 - 6*x + 4*Sqr(x))*Log(x);

      res = 3.0/(128*pow(Pi,3)) * mass/Sqr(vev) * deltaV * RT;
   } else {
      res = 1.0/(128*Pi * mass * Sqr(x)) * sqrt(1 - 4*x) * (1 - 4*x + 12*Sqr(x));
   }
   const auto indices = concatenate(indexOut1, indexOut2, indexIn);
   return res * std::norm(Vertex<Z,Z,H>::evaluate(indices, context).value());
}

// special case for H -> W+ W-
// TODO: implement higher order corrections
template <>
double CLASSNAME::get_partial_width<H, W, conj<W>::type>(
   const EvaluationContext& context,
   typename field_indices<H>::type const& indexIn,
   typename field_indices<conj<W>::type>::type const& indexOut1,
   typename field_indices<W>::type const& indexOut2) const
{

   const double mh = context.mass<H>(indexIn);
   const double mW = context.mass<W>(indexOut1);
   const double x = Sqr(mW / mh);
   double res;
   // three-body-decays if below threshold
   if (4 * x > 1.0) {
      // const auto vd = MODELPARAMETER(vd);
      // const auto vu = MODELPARAMETER(vu);
      // TODO: specify the vev correctly
      const auto vev = 246.0; // sqrt(Sqr(vd) + Sqr(vu));
      const double sw2 =
         Sqr(Sin(model.ThetaW())); // 1.0 - Sqr(PHYSICAL(MVWp)/PHYSICAL(MVZ));

      // deltaV is 1 for W-bosons
      const double RT = 3 * (1 - 8 * x + 20 * Sqr(x)) / sqrt(4 * x - 1) *
                           acos(0.5 * (3 * x - 1) / pow(x, 3.0 / 2.0)) -
                        0.5 * (1 - x) / x * (2 - 13 * x + 47 * Sqr(x)) -
                        3.0 / 2.0 * (1 - 6 * x + 4 * Sqr(x)) * Log(x);

      res = 3.0 / (128 * pow(Pi, 3)) * mh / Sqr(vev) * RT;
   } else {
      res = 2.0 / (128 * Pi * mh * Sqr(x)) * sqrt(1 - 4 * x) *
            (1 - 4 * x + 12 * Sqr(x));
   }
   const auto indices = concatenate(indexOut2, indexOut1, indexIn);
   const auto ghWW =
      Vertex<conj<W>::type, W, H>::evaluate(indices, context).value();
   return res * std::norm(ghWW);
}

// special case for H -> gluon gluon
template<>
double CLASSNAME::get_partial_width<H,G,G>(
   const EvaluationContext& context,
   typename field_indices<H>::type const& indexIn,
   typename field_indices<G>::type const& indexOut1,
   typename field_indices<G>::type const& indexOut2
   ) const
{

   const double mass = context.mass<H>(indexIn);
   return 0.039788735772973836 * pow(mass, 3.0)
      * AbsSqr(effective_coupling<G,G,H>(model, indexOut1, indexOut2, indexIn));
}

// special case for H -> photon photon
template<>
double CLASSNAME::get_partial_width<H,A,A>(
   const EvaluationContext& context,
   typename field_indices<H>::type const& indexIn,
   typename field_indices<A>::type const& indexOut1,
   typename field_indices<A>::type const& indexOut2
   ) const
{
   const double mass = context.mass<H>(indexIn);
   return 0.0049735919716217296 * pow(mass, 3.0)
      * AbsSqr(effective_coupling<A,A,H>(model, indexOut1, indexOut2, indexIn));
}

// special case for H -> photon Z
template <>
double CLASSNAME::get_partial_width<H, A, Z>(
   const EvaluationContext& context,
   typename field_indices<H>::type const& indexIn,
   typename field_indices<A>::type const& indexOut1,
   typename field_indices<Z>::type const& indexOut2) const
{

   const double mass = context.mass<H>(indexIn);
   const double MVZ = context.mass<Z>(indexOut2);
   if(MVZ/mass >= 1.0)
      return 0.0;
   return 1.0/(16.0*Pi) * pow(mass * (1.0 - Sqr(MVZ/mass)), 3)
    * AbsSqr(effective_coupling<A,Z,H>(model, indexOut1, indexOut2, indexIn));
}

template<>
double CLASSNAME::get_partial_width<H,Z,A>(
   const EvaluationContext& context,
   typename field_indices<H>::type const& indexIn,
   typename field_indices<Z>::type const& indexOut1,
   typename field_indices<A>::type const& indexOut2
   ) const
{
   return get_partial_width<H,A,Z>(context, indexIn, indexOut2, indexOut1);
}

// special case for H -> H H
template <>
double CLASSNAME::get_partial_width<H, H, H>(
   const EvaluationContext& context,
   typename field_indices<H>::type const& indexIn,
   typename field_indices<H>::type const& indexOut1,
   typename field_indices<H>::type const& indexOut2) const
{
   const double mHIn = context.mass<H>(indexIn);
   const double mH1 = context.mass<H>(indexOut1);
   const double mH2 = context.mass<H>(indexOut2);

   if (mHIn < mH1 + mH2) {
         return 0.;
   }

   const double flux = 1. / (2. * mHIn);
   const double ps = beta(mHIn, mH1, mH2) / (8. * Pi);
   const auto ps_symmetry =
      final_state_symmetry_factor<H, H>(indexOut1, indexOut2);

   return flux * ps * ps_symmetry *
          AbsSqr(effective_coupling<H, H, H>(model, indexOut1, indexOut2, indexIn));
}

// special case for H -> Fd Fd
template<>
double CLASSNAME::get_partial_width<H,dq,bar<dq>::type>(
   const EvaluationContext& context,
   typename field_indices<H>::type const& indexIn,
   typename field_indices<dq>::type const& indexOut1,
   typename field_indices<dq>::type const& indexOut2
   ) const
{
   const double mh = context.mass<H>(indexIn);
   const double mdq = context.mass<dq>(indexOut1);
   const double mdqbar = context.mass<bar<dq>::type>(indexOut2);

   if (mh < mdq + mdqbar) {return 0.;}

   // SM expression + pure BSM 1L corrections
   return amplitude_squared<H, bar<dq>::type, dq>(context, indexIn, indexOut1, indexOut2);
}

// special case for H -> Fu Fu
template<>
double CLASSNAME::get_partial_width<H,uq,bar<uq>::type>(
   const EvaluationContext& context,
   typename field_indices<H>::type const& indexIn,
   typename field_indices<uq>::type const& indexOut1,
   typename field_indices<uq>::type const& indexOut2
   ) const
{
   const double mh = context.mass<H>(indexIn);
   const double muq = context.mass<uq>(indexOut1);
   const double muqbar = context.mass<bar<uq>::type>(indexOut2);

   if (mh < muq + muqbar) {return 0.;}

   // SM expression + pure BSM 1L corrections
   return amplitude_squared<H, bar<uq>::type, uq>(context, indexIn, indexOut1, indexOut2);
}

@decaysCalculationFunctions@
@partialWidthCalculationFunctions@

} // namespace flexiblesusy
