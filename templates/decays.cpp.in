// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at @DateAndTime@

/**
 * @file @ModelName@_decays.cpp
 * @brief implementation of particle decays in the @ModelName@
 *
 * Contains the definition of @ModelName@ decays class methods,
 * which calculate the decay rates for particles in the model.
 *
 * This file was generated at @DateAndTime@ with FlexibleSUSY
 * @FlexibleSUSYVersion@ (git commit: @FlexibleSUSYGitCommit@) and SARAH @SARAHVersion@ .
 */

#include "@ModelName@_decays.hpp"
#include "@ModelName@_info.hpp"
#include "@ModelName@_mass_eigenstates.hpp"

#include "config.h"
#include "thread_pool.hpp"
#include "wrappers.hpp"

#include <boost/range/algorithm.hpp>

#include <cmath>

namespace flexiblesusy {

#define CLASSNAME @ModelName@_decays

#define PHYSICAL(parameter) model.get_physical().parameter
#define MODELPARAMETER(parameter) model.get_##parameter()

using namespace cxx_qft;
using effective_couplings::beta;


// returns an amplitude squared
// we need to distinguish between different combinations of scalars, fermions and vectors
// as, for examples, for S -> SS we take |A|^2 while for S - > FF we take (|A_L|^2 + |A_R|^2)

// S -> FF
template <typename Field1, typename Field2, typename Field3>
typename std::enable_if<cxx_qft::is_scalar<Field1>::value &&
                        cxx_qft::is_fermion<Field2>::value &&
                        cxx_qft::is_fermion<Field3>::value,
                        double>::type
amplitude_squared(cxx_qft::@ModelName@_evaluation_context const& context,
                  typename cxx_qft::field_indices<Field1>::type const& indexIn,
                  typename cxx_qft::field_indices<Field2>::type const& indexOut1,
                  typename cxx_qft::field_indices<Field3>::type const& indexOut2)
{
   // const auto mA = context_.mass<Field1>(indexIn);
   // const auto muB = context_.mass<Field2>(indexOut1) / mA;
   // const auto muC = context_.mass<Field2>(indexOut2) / mA;

   // const auto indices = concatenate(indexIn, indexOut1, indexOut2);
   // const auto vertex = Vertex<Field1,Field2,Field3>::evaluate(indices, context_);

   // const auto L = vertex.left();
   // const auto R = vertex.right();

   // // eq. B.35b
   // return mA * mA *
   //        ((std::norm(L) + std::norm(R)) * (1. - muB * muB - muC * muC) -
   //         2. * muB * muC * 2. * std::real(std::conj(L) * R) );

   Decay_amplitude_SFF amplitude;
   amplitude.m_decay = context.mass<Field1>(indexIn);
   amplitude.m_out_1 = context.mass<Field2>(indexOut1);
   amplitude.m_out_2 = context.mass<Field3>(indexOut2);

   const auto indices = concatenate(indexIn, indexOut1, indexOut2);
   const auto vertex = cxx_qft::Vertex<Field1,Field2,Field3>::evaluate(indices, context);

   // @todo correct assignments
   amplitude.matrix_element_left = vertex.left();
   amplitude.matrix_element_right = vertex.right();

   return amplitude.square();
}

// S -> VV
template<typename Field1, typename Field2, typename Field3>
typename std::enable_if<cxx_qft::is_scalar<Field1>::value &&
                        cxx_qft::is_vector<Field2>::value &&
                        cxx_qft::is_vector<Field3>::value, double>::type
amplitude_squared(cxx_qft::@ModelName@_evaluation_context const& context,
                  typename cxx_qft::field_indices<Field1>::type const& indexIn,
                  typename cxx_qft::field_indices<Field2>::type const& indexOut1,
                  typename cxx_qft::field_indices<Field3>::type const& indexOut2)
{
   // const auto mA = context_.mass<Field1>(indexIn);
   // double res;
   // // B.37
   // if(Field2::massless && Field3::massless) {
   //    res = 4.;
   // } else if((Field2::massless && !Field3::massless) || (!Field2::massless && Field3::massless)) {
   //    res = 3.;
   // } else {
   //    const auto muB2 = pow(context_.mass<Field2>(indexOut1) / mA, 2);
   //    const auto muC2 = pow(context_.mass<Field2>(indexOut2) / mA, 2);
   //    res = 1./(4.*muB2*muC2) * (
   //       pow(muB2 + muC2, 2) - 2.*(muB2 + muC2) + 8.*muB2*muC2 + 1
   //    );
   // }
   // const auto indices = concatenate(indexIn, indexOut1, indexOut2);
   // const auto vertex = Vertex<Field1,Field2,Field3>::evaluate(indices, context_);
   // return res * std::norm(vertex.value());

   const auto indices = concatenate(indexIn, indexOut1, indexOut2);
   const auto vertex = cxx_qft::Vertex<Field1,Field2,Field3>::evaluate(indices, context);

   if (Field2::massless && Field3::massless) {
      return 4. * AbsSqr(vertex.value());
   } else if ((Field2::massless && !Field3::massless) ||
              (!Field2::massless && Field3::massless)) {
      return 3. * AbsSqr(vertex.value());
   }

   Decay_amplitude_SVV amplitude;
   amplitude.m_decay = context.mass<Field1>(indexIn);
   amplitude.m_out_1 = context.mass<Field2>(indexOut1);
   amplitude.m_out_2 = context.mass<Field3>(indexOut2);

   amplitude.M1 = vertex.value();
   amplitude.M2 = std::complex<double>(0., 0.);

   return amplitude.square();
}
// S -> S V
template <typename Field1, typename Field2, typename Field3>
typename std::enable_if<cxx_qft::is_scalar<Field1>::value &&
                        cxx_qft::is_scalar<Field2>::value &&
                        cxx_qft::is_vector<Field3>::value,
                        double>::type
amplitude_squared(cxx_qft::@ModelName@_evaluation_context const& context,
                  typename cxx_qft::field_indices<Field1>::type const& indexIn,
                  typename cxx_qft::field_indices<Field2>::type const& indexOut1,
                  typename cxx_qft::field_indices<Field3>::type const& indexOut2)
{
   // const auto mA2 = pow(context_.mass<Field1>(indexIn), 2);
   // const auto muB2 = pow(context_.mass<Field2>(indexOut1), 2) / mA2;

   // double result;
   // // B.36
   // if (Field3::massless) {
   //    result = -2. * mA2 * (1 + muB2);
   // } else {
   //    const auto muC2 = pow(context_.mass<Field2>(indexOut2), 2) / mA2;
   //    result = mA2/muC2 * (pow(muC2 - muB2, 2) -2. * (muB2 + muC2) + 1.);
   // }
   // const auto indices = concatenate(indexIn, indexOut1, indexOut2);
   // const auto vertex = Vertex<Field1,Field2,Field3>::evaluate(indices, context_);
   // return result * std::norm(vertex.value(1,2));

   const auto indices = concatenate(indexIn, indexOut1, indexOut2);
   const auto vertex = cxx_qft::Vertex<Field1,Field2,Field3>::evaluate(indices, context);

   if (Field3::massless) {
      const auto mA2 = Sqr(context.mass<Field1>(indexIn));
      const auto muB2 = Sqr(context.mass<Field2>(indexOut1)) / mA2;

      return -2. * mA2 * (1. + muB2) * AbsSqr(vertex.value(1, 2));
   }

   Decay_amplitude_SSV amplitude;
   amplitude.m_decay = context.mass<Field1>(indexIn);
   amplitude.m_scalar = context.mass<Field2>(indexOut1);
   amplitude.m_vector = context.mass<Field3>(indexOut2);

   amplitude.matrix_element = vertex.value(1, 2);

   return amplitude.square();
}
// S -> V S
template<typename Field1, typename Field2, typename Field3>
typename std::enable_if<cxx_qft::is_scalar<Field1>::value &&
                        cxx_qft::is_scalar<Field3>::value &&
                        cxx_qft::is_vector<Field2>::value, double>::type
amplitude_squared(cxx_qft::@ModelName@_evaluation_context const& context,
                  typename cxx_qft::field_indices<Field1>::type const& indexIn,
                  typename cxx_qft::field_indices<Field2>::type const& indexOut1,
                  typename cxx_qft::field_indices<Field3>::type const& indexOut2)
{
      return amplitude_squared<Field1, Field3, Field2>(context, indexIn, indexOut2, indexOut1);
}

// S -> SS
template<typename Field1, typename Field2, typename Field3>
typename std::enable_if<cxx_qft::is_scalar<Field1>::value &&
                        cxx_qft::is_scalar<Field2>::value &&
                        cxx_qft::is_scalar<Field3>::value, double>::type
amplitude_squared(cxx_qft::@ModelName@_evaluation_context const& context,
                  typename cxx_qft::field_indices<Field1>::type const& indexIn,
                  typename cxx_qft::field_indices<Field2>::type const& indexOut1,
                  typename cxx_qft::field_indices<Field3>::type const& indexOut2)
{
      // const auto indices = concatenate(indexIn, indexOut1, indexOut2);
      // const auto vertex = Vertex<Field1,Field2,Field3>::evaluate(indices, context_);
      // // eq. B.35b
      // return std::norm(vertex.value());

      const auto indices = concatenate(indexIn, indexOut1, indexOut2);
      const auto vertex = cxx_qft::Vertex<Field1,Field2,Field3>::evaluate(indices, context);

      Decay_amplitude_SSS amplitude;
      amplitude.matrix_element = vertex.value();

      return amplitude.square();
}

void CLASSNAME::set_include_higher_order_corrections(bool flag)
{
   include_higher_order_corrections = flag;
}

const @ModelName@_decay_table& CLASSNAME::get_decay_table() const
{
   return decay_table;
}

void CLASSNAME::set_loop_corrections(const Decays_loop_corrections& loop_corrections_)
{
   loop_corrections = loop_corrections_;
}

const Decays_loop_corrections& CLASSNAME::get_loop_corrections() const
{
   return loop_corrections;
}

const Decays_problems& CLASSNAME::get_problems() const
{
   return problems;
}

void CLASSNAME::clear_problems()
{
   problems.clear();
}

void CLASSNAME::clear()
{
   clear_problems();
   decay_table.clear();
}

void CLASSNAME::calculate_decays()
{
#ifdef ENABLE_THREADS
@callAllDecaysFunctionsInThreads@
#else
@callAllDecaysFunctions@
#endif
}


// -------- specializations for decays needing higher order corrections --------

@create_SM_particle_usings@
using ContextName = cxx_qft::@ModelName@_evaluation_context;

template<>
Decay_amplitude_SVV CLASSNAME::effective_coupling<H,G,G>(
   const cxx_qft::@ModelName@_evaluation_context& context,
   const typename cxx_qft::field_indices<H>::type& indexIn,
   const typename cxx_qft::field_indices<G>::type& indexOut1,
   const typename cxx_qft::field_indices<G>::type& indexOut2
   ) const
{
   Decay_amplitude_type<H,G,G>::type result;
   return result;
}

template<>
Decay_amplitude_SVV CLASSNAME::effective_coupling<H,A,A>(
   const cxx_qft::@ModelName@_evaluation_context& context,
   const typename cxx_qft::field_indices<H>::type& indexIn,
   const typename cxx_qft::field_indices<A>::type& indexOut1,
   const typename cxx_qft::field_indices<A>::type& indexOut2
   ) const
{
   Decay_amplitude_type<H,A,A>::type result;
   return result;
}

template<>
Decay_amplitude_SVV CLASSNAME::effective_coupling<H,A,Z>(
   const cxx_qft::@ModelName@_evaluation_context& context,
   const typename cxx_qft::field_indices<H>::type& indexIn,
   const typename cxx_qft::field_indices<A>::type& indexOut1,
   const typename cxx_qft::field_indices<Z>::type& indexOut2
   ) const
{
   Decay_amplitude_type<H,A,Z>::type result;
   return result;
}

template<>
Decay_amplitude_SVV CLASSNAME::effective_coupling<H,Z,A>(
   const cxx_qft::@ModelName@_evaluation_context& context,
   const typename cxx_qft::field_indices<H>::type& indexIn,
   const typename cxx_qft::field_indices<Z>::type& indexOut1,
   const typename cxx_qft::field_indices<A>::type& indexOut2
   ) const
{
   Decay_amplitude_type<H,Z,A>::type result;
   return result;
}


// special case for H -> gluon gluon
template<>
double CLASSNAME::get_partial_width<H,G,G>(
   const @ModelName@_evaluation_context& context,
   typename field_indices<H>::type const& indexIn,
   typename field_indices<G>::type const& indexOut1,
   typename field_indices<G>::type const& indexOut2
   ) const
{

   const double mass = context.mass<H>(indexIn);
   return 0.039788735772973836 * pow(mass, 3.0);
//      * effective_coupling<H,G,G>(context, indexIn, indexOut1, indexOut2).square();
}

// special case for H -> photon photon
template<>
double CLASSNAME::get_partial_width<H,A,A>(
   const @ModelName@_evaluation_context& context,
   typename field_indices<H>::type const& indexIn,
   typename field_indices<A>::type const& indexOut1,
   typename field_indices<A>::type const& indexOut2
   ) const
{
   const double mass = context.mass<H>(indexIn);
   return 0 * 0.0049735919716217296 * pow(mass, 3.0);
      //* effective_coupling<H,A,A>(context, indexIn, indexOut1, indexOut2).square();
}




unsigned int number_of_active_flavours(double m)
{
   /*
   if (m < qedqcd.displayMbMb(){
      return 4.0;
   } else if (m < qedqcd.displayPoleMt()) {
      return 5.0;
   } else {
      return 6.0;
   }
   */
   return 5;
}

double calc_deltaqq(double alpha_s_red, double Nf) {
   return  
      5.67*alpha_s_red
      + (35.94 - 1.36*Nf)*Sqr(alpha_s_red)
      + (164.14 - 25.77*Nf + 0.26*Sqr(Nf))*std::pow(alpha_s_red, 3);
}


@include_H_to_ZZ@
@include_H_to_WW@
@include_H_to_ZA@
@include_H_to_HH@
@include_H_to_uquq@
@include_H_to_dqdq@
@include_H_to_AHAH@


@decaysCalculationFunctions@
@partialWidthCalculationFunctions@

} // namespace flexiblesusy
