// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at @DateAndTime@

/**
 * @file cxx_qft/@ModelName@_context_base.hpp
 *
 * This file was generated at @DateAndTime@ with FlexibleSUSY
 * @FlexibleSUSYVersion@ and SARAH @SARAHVersion@ .
 */

#ifndef @ModelName@_CXXQFT_CONTEXT_BASE_H
#define @ModelName@_CXXQFT_CONTEXT_BASE_H

#include "@ModelName@_fields.hpp"

namespace flexiblesusy
{
namespace @ModelName@_cxx_diagrams
{
   struct @ModelName@_context_base {
      const @ModelName@_mass_eigenstates& model; ///< The model object.

      template <class Field>
      double mass(const typename field_indices<Field>::type& indices) const
      {
         using CleanField =
            typename field_traits::remove_lorentz_conjugation<Field>::type;
         return mass_impl<CleanField>(indices);
      }
   template<class Field>
   double physical_mass(const typename field_indices<Field>::type& indices) const
      {
         using CleanField = typename field_traits::remove_lorentz_conjugation<Field>::type;
         return physical_mass_impl<CleanField>(indices);
      }

      @ModelName@_context_base(const @ModelName@_mass_eigenstates& m) : model(m) {}
      @ModelName@_context_base(const @ModelName@_context_base&) = default;
      @ModelName@_context_base(@ModelName@_context_base&&) = default;

      @ModelName@_context_base& operator=(const @ModelName@_context_base&) = default;
      @ModelName@_context_base& operator=(@ModelName@_context_base&&) = default;

      virtual ~@ModelName@_context_base() = default;

   private:
      template <class Field>
      double
      mass_impl(const typename field_indices<Field>::type& indices) const;
      template<class Field>
      double physical_mass_impl(const typename field_indices<Field>::type& indices) const;
   };

@CXXDiagrams_MassFunctions@
@CXXDiagrams_PhysicalMassFunctions@

} // namespace @ModelName@_cxx_diagrams

} // namespace flexiblesusy

#include "@ModelName@_vertices.hpp"

#endif
